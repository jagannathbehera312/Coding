 int solve(int w, int wt[], int val[], int n,vector<vector<int>> &dp)
    {
        if(n==0 || w==0){
           return 0;
       }
       
       if(dp[n][w] != -1){
           return dp[n][w];
       }
       
       if(wt[n-1] <= w){
           
           return dp[n][w]= max(val[n-1]+solve(w-wt[n-1],wt,val,n-1,dp),solve(w,wt,val,n-1,dp));
       }
       
       else if(wt[n-1] > w){
           return dp[n][w]=  solve(w,wt,val,n-1,dp);
       }
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
        vector<vector<int> > dp(n+1,vector<int>(W+1,-1));
        
       return solve(W,wt,val,n,dp);
    }