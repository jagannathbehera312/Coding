class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        
        
        int m = grid[0].size();
        int n = grid.size();
        
        queue<pair<pair<int,int>,int>> q;
        
        int vis[n][m];
        
        for(int i=0;i<n;i++){
            
            for(int j=0;j<m;j++){
                
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                    vis[i][j]=2;
                }
                else{
                    vis[i][j]=0;
                }
            }
        }
        
        int tm=0;
        int delrow[]={-1,0,+1,0};
        int delcol[]={0,1,0,-1};
        
        while(!q.empty()){
            
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            
            q.pop();
            
            tm = max(tm,t);
            
            for(int i=0;i<4;i++){
                
                int row = r+delrow[i];
                int col = c + delcol[i];
                
                if(row>=0 && row<n && col>=0 && col<m && vis[row][col]!=2 && grid[row][col]==1){
                    
                    q.push({{row,col},t+1});
                    vis[row][col]=2;
                }
            }
            
            
            
        }
        
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                
                if(vis[i][j]!=2 && grid[i][j]==1){
                    return -1;
                }
            }
        }
        
        return tm;
        
    }
};