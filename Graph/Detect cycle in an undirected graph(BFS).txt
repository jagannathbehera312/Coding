bool isCyclicBFS(int node,unordered_map<int,bool> &visited,vector<int>adj[],unordered_map<int,int> &parent){
        
        
        
        parent[node]=-1;
        visited[node]=1;
        
        queue<int> q;
        
        q.push(node);
        
        while(!q.empty()){
            
            int frontnode = q.front();
            q.pop();
            
            for(auto i : adj[frontnode]){
                
                if(visited[i] == true && i != parent[frontnode]){
                    return 1;
                }
                else if(!visited[i]){
                    
                    q.push(i);
                    visited[i]=1;
                    parent[i] = frontnode;
                }
            }
        }
        
        return 0;
        
    }
    bool isCycle(int V, vector<int> adj[]) {
        
        
        unordered_map<int,bool> visited;
        bool ans;
        unordered_map<int,int> parent;
        
        for(int i=0;i<V;i++){
            
            if(!visited[i]){
                 ans = isCyclicBFS(i,visited,adj,parent);
                
               if(ans==1){
                   return true;}
            }
        }
        
        
        return false;
    }