bool isCyclicBFS(int node,unordered_map<int,bool> &visited,vector<int>adj[],unordered_map<int,int> &parent){
        
        
        
        parent[node]=-1;
        visited[node]=1;
        
        queue<int> q;
        
        q.push(node);
        
        while(!q.empty()){
            
            int frontnode = q.front();
            q.pop();
            
            for(auto i : adj[frontnode]){
                
                if(visited[i] == true && i != parent[frontnode]){
                    return 1;
                }
                else if(!visited[i]){
                    
                    q.push(i);
                    visited[i]=1;
                    parent[i] = frontnode;
                }
            }
        }
        
        return 0;
        
    }
    bool isCycle(int V, vector<int> adj[]) {
        
        
        unordered_map<int,bool> visited;
        bool ans;
        unordered_map<int,int> parent;
        
        for(int i=0;i<V;i++){
            
            if(!visited[i]){
                 ans = isCyclicBFS(i,visited,adj,parent);
                
               if(ans==1){
                   return true;}
            }
        }
        
        
        return false;
    }












Second Method






class Solution {
  public:
  
  
    bool bfs(int src,vector<int> adj[],int vis[]){
        
        vis[src]=1;
        queue<pair<int,int>> q;
        
        q.push({src,-1});
        
        while(!q.empty())
        {
            
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            
            for(auto it:adj[node])
            {
                
                if(!vis[it]){
                    vis[it]=1;
                    q.push({it,node});
                }
                
                else if(parent!=it){
                    return true;
                }
                
            }
        }
        
        return false;
    }
  
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        
        int vis[V]={0};
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(bfs(i,adj,vis)){
                    return true;
                }
            }
        }
        
        return false;
    }
};